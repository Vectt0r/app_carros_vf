CarForm MODIFICADO PARA SALVAR QUANDO DER A ENTRADA NA CORRIDA

import React, { useState, useEffect } from 'react';
import { View, TextInput, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';
import useStorage from '../hooks/useStorage';
import { useNavigation } from '@react-navigation/native';

const CarForm = () => {
  const { saveItem } = useStorage();
  const [dataAtual, setData] = useState('');
  const [placaCarro, setPlacaCarro] = useState('');
  const [nomeFuncionario, setNomeFuncionario] = useState('');
  const [kmInicial, setKmInicial] = useState('');
  const [horaSaida, setHoraSaida] = useState('');
  const [localidade, setLocalidade] = useState('');
  const [cidade, setCidade] = useState('');
  const [localidadeDois, setLocalidadeDois] = useState('');
  const [cidadeDois, setCidadeDois] = useState('');
  const [status] = useState('Em Andamento');
  const [isFormValid, setIsFormValid] = useState(false);
  const navigation = useNavigation();

  const formatarHoraBrasil = () => {
    const options = {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      timeZone: 'America/Sao_Paulo',
    };
    const dataHoraAtual = new Date().toLocaleString('pt-BR', options);
    return dataHoraAtual;
  };

  const formatarDataBrasil = () => {
    const options = {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    };
    const dataAtual = new Date().toLocaleString('pt-BR', options);
    return dataAtual;
  };

  useEffect(() => {
    setData(formatarDataBrasil());
  }, []);

  useEffect(() => {
    setHoraSaida(formatarHoraBrasil());
  }, []);

  useEffect(() => {
    // Verifica se todos os campos obrigatórios estão preenchidos
    setIsFormValid(
      nomeFuncionario &&
      placaCarro &&
      kmInicial &&
      horaSaida &&
      localidade &&
      cidade
    );
  }, [nomeFuncionario, placaCarro, kmInicial, horaSaida, localidade, cidade]);

  async function handleSave() {
    try {
      await saveItem('@nomeFuncionario', nomeFuncionario);
      await saveItem('@data', dataAtual);
      await saveItem('@placa', placaCarro);
      await saveItem('@kmInicial', kmInicial);
      await saveItem('@horaSaida', horaSaida);
      await saveItem('@localidade', localidade);
      await saveItem('@cidade', cidade);
      await saveItem('@localidadeDois', localidadeDois);
      await saveItem('@cidadeDois', cidadeDois);
      await saveItem('@status', status);

      const apiUrl = 'http://172.20.15.149:3000/api/encerrarCorrida';

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          data: dataAtual,
          nome: nomeFuncionario,
          placa: placaCarro,
          kmInicial: kmInicial,
          horaSaida: horaSaida,
          localidade: localidade,
          cidade: cidade,
          localidadeDois: localidadeDois,
          cidadeDois: cidadeDois,
          status: status,
        }),
      });

      if (response.ok) {
        alert('Dados salvos com sucesso na API');
      } else {
        console.error('Erro ao salvar dados na API:', response.status);
        alert('Erro ao salvar dados na API');
      }

      navigation.navigate('Home', {
        dadosCarros: {
          data: dataAtual,
          nome: nomeFuncionario,
          placa: placaCarro,
          kmInicial: kmInicial,
          horaSaida: horaSaida,
          localidade: localidade,
          cidade: cidade,
          localidadeDois: localidadeDois,
          cidadeDois: cidadeDois,
          status: status,
        },
      });

      alert('Salvo com Sucesso');
    } catch (error) {
      console.error('Erro ao salvar:', error);
    }
  }

  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollViewContent} keyboardShouldPersistTaps="handled">

        <Text style={styles.label}>Nome do Funcionário</Text>
        <TextInput
          style={styles.input}
          placeholder=""
          value={nomeFuncionario}
          onChangeText={(text) => setNomeFuncionario(text)}
        />

        <Text style={styles.label}>Número da Placa</Text>
        <TextInput
          style={styles.input}
          placeholder=""
          value={placaCarro}
          onChangeText={(text) => setPlacaCarro(text)}
        />

        <Text style={styles.label}>KM Inicial</Text>
        <TextInput
          style={styles.input}
          placeholder=""
          value={kmInicial}
          onChangeText={(text) => setKmInicial(text)}
          keyboardType="numeric"
        />

        <Text style={styles.label}>Hora Saída</Text>
        <TextInput
          style={[styles.input, !horaSaida ? styles.greyedInput : null]}
          placeholder=""
          value={horaSaida}
          onChangeText={(text) => setHoraSaida(text)}
          editable={false}
        />

        <Text style={styles.label}>Cidade</Text>
        <TextInput
          style={styles.input}
          placeholder=""
          value={cidade}
          onChangeText={(text) => setCidade(text)}
        />

        <Text style={styles.label}>Localidade</Text>
        <TextInput
          style={styles.input}
          placeholder=""
          value={localidade}
          onChangeText={(text) => setLocalidade(text)}
        />

        <TouchableOpacity
          style={[styles.addButton, { backgroundColor: isFormValid ? '#32CD32' : '#D3D3D3' }]}
          onPress={handleSave}
          disabled={!isFormValid}
        >
          <Text style={styles.addButtonText}>Iniciar</Text>
        </TouchableOpacity>

      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 10,
    backgroundColor: '#fff',
    elevation: 2,
    flex: 1,
    marginBottom: 130,
  },
  scrollViewContent: {
    flexGrow: 1,
  },
  label: {
    fontSize: 20,
    marginBottom: 5,
    color: '#333',
  },
  input: {
    height: 50,
    borderColor: '#ccc',
    borderWidth: 1,
    marginBottom: 10,
    paddingLeft: 8,
    borderRadius: 4,
    fontSize: 18,
  },
  greyedInput: {
    backgroundColor: '#f2f2f2',
  },
  dateTimeContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 10,
  },
  dateContainer: {
    flex: 1,
    marginRight: 5,
  },
  dateInput: {
    height: 40,
    borderColor: '#ccc',
    borderWidth: 1,
    paddingLeft: 8,
    borderRadius: 4,
  },
  inlineInputs: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 10,
  },
  inlineInputContainer: {
    flex: 1,
    marginRight: 5,
  },
  inlineInput: {
    height: 40,
    borderColor: '#ccc',
    borderWidth: 1,
    paddingLeft: 8,
    borderRadius: 4,
  },
  inputContainer: {
    marginBottom: 10,
  },
  addButton: {
    backgroundColor: '#32CD32',
    padding: 10,
    alignItems: 'center',
    borderRadius: 4,
    marginBottom: 20,
    marginTop: 10,
  },
  addButtonText: {
    color: '#fff',
    fontSize: 16,
  },
  backButtonText: {
    color: '#fff',
    fontSize: 16,
  },
  inputContainerObs: {
    height: 150,
    marginBottom: 10,
  },
  inputObs: {
    height: 90,
    borderColor: '#ccc',
    borderWidth: 1,
    marginBottom: 10,
    paddingLeft: 8,
    borderRadius: 4,
  },
  labelObs: {
    marginBottom: 5,
    color: '#333',
  },
});

export default CarForm;
